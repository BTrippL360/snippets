---

AWSTemplateFormatVersion: 2010-09-09

Description: AWS CloudFormation Stack for an EKS Cluster and Associated Resources.

Parameters:

  EKSWorkerInstanceType:
    Description: EKS Worker Instance Type
    Type: String
    Default: t2.micro

  EKSWorkerKeyName:
    Description: EKS Keypair
    Type: AWS::EC2::KeyPair::KeyName
    Default: eks

Mappings:

  AWSRegion2Amazon2LinuxAMI:
    # https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html
    us-west-2:
      '64': ami-73a6e20b

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicInternetRouteTable

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: 10.0.0.0/25
      VpcId: !Ref VPC

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: 10.0.0.128/25
      VpcId: !Ref VPC

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet01

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicInternetRouteTable
      SubnetId: !Ref PublicSubnet02

  # Description of the EKS Service IAM Role
  # the EKS Service IAM Role is used to allow the AWS EKS Service to manage
  # AWS resources on your behalf
  # https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html
  EKSServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EKS Cluster
      VpcId: !Ref VPC

  EKSWorkerSecurityGroupFromEKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSWorkerSecurityGroup
    Properties:
      Description: Allow EKS Cluster to accept connections from EKS Workers
      GroupId: !Ref EKSClusterSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref EKSWorkerSecurityGroup

  EKSClusterSecurityGroupToEKSWorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: EKSWorkerSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref EKSClusterSecurityGroup
      DestinationSecurityGroupId: !Ref EKSWorkerSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      # https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html
      ResourcesVpcConfig:
        SecurityGroupIds:
          # am unclear if this is required
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          # Specifies subnets that will host resources used in your EKS Cluster
          # these "resources" include EC2 Instances (worker nodes) and Load Balancers
          # best practice is:
          # to use "Public" subnets for Load Balancers that allow access from the Internet
          # to use "Private" subnets for EC2 Instances (worker nodes)
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02
      RoleArn: !GetAtt EKSServiceIAMRole.Arn

  # Description of the EKS Worker IAM Role
  # the EKS Service IAM Role is used to allow the AWS EKS Worker Nodes
  # to issue "Describe Cluster" commands
  # these commands are required for issuing aws eks describe-* commands
  EKSWorkerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy added to resolve issue where
        # kubelet[12269]: W0702 05:01:12.238417   12269 cni.go:171] Unable to update cni config: No networks found in /etc/cni/net.d
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        # arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy add to resolve issue where
        # aws eks commands are required to retrieve values used in configuring files
        # required to start the kubelet service
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        # added as this will likely be used
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSWorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EKSWorkerIAMRole

  EKSWorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EKS Worker Nodes
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      # am unclear if this is required
      Tags:
      - Key: !Sub kubernetes.io/cluster/${EKSCluster}
        Value: owned

  EKSWorkerSecurityGroupFromEKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EKSWorkerSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref EKSWorkerSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
      SourceSecurityGroupId: !Ref EKSClusterSecurityGroup

  EKSWorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref EKSWorkerLaunchConfig
      MaxSize: 2
      MinSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      # tags.go:94] Tag "KubernetesCluster" nor "kubernetes.io/cluster/..." not found; Kubernetes may behave unexpectedly.
      Tags:
        - Key: !Sub kubernetes.io/cluster/${EKSCluster}
          Value: owned
          PropagateAtLaunch: true

  EKSWorkerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EKSWorkerInstanceProfile
      ImageId: !FindInMap [AWSRegion2Amazon2LinuxAMI, !Ref "AWS::Region", 64]
      InstanceType: !Ref EKSWorkerInstanceType
      KeyName: !Ref EKSWorkerKeyName
      SecurityGroups:
        - !Ref EKSWorkerSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            # newer versions of awscli have support for aws eks commands
            # can be removed when the a newer version of the AWS Linux 2 AMI for EKS supports awscli version > 1.15.32
            # officially AWS EKS requires 1.15.32 version of the AWS CLI tool
            yum -y install python-pip
            pip install awscli --upgrade
            EKS_CERTIFICATE_AUTHORITY_DATA=$(aws eks describe-cluster --region='us-west-2' --name='${EKSCluster}' --query 'cluster.certificateAuthority.data' --output='text')
            EKS_CERTIFICATE_AUTHORITY_DATA_BASE64=$(echo $EKS_CERTIFICATE_AUTHORITY_DATA | base64 -d)
            EKS_MASTER_ENDPOINT=$(aws eks describe-cluster --region='us-west-2' --name='${EKSCluster}' --query='cluster.endpoint' --output='text')
            INTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            if [[ $INTERNAL_IP == 10.* ]] ; then DNS_CLUSTER_IP=172.20.0.10; else DNS_CLUSTER_IP=172.20.0.10; fi
            mkdir -p /etc/kubernetes/pki
            cat > /etc/kubernetes/pki/ca.crt <<EOF
            $EKS_CERTIFICATE_AUTHORITY_DATA_BASE64
            EOF
            #
            # configure /var/lib/kubelet/kubeconfig file
            sed -i s,MASTER_ENDPOINT,$EKS_MASTER_ENDPOINT,g /var/lib/kubelet/kubeconfig
            sed -i s/CLUSTER_NAME/${EKSCluster}/g /var/lib/kubelet/kubeconfig
            sed -i s,CERTIFICATE_AUTHORITY_FILE,/etc/kubernetes/pki/ca.crt,g /var/lib/kubelet/kubeconfig
            #
            # configure Kubelet Service /etc/systemd/system/kubelet.service file
            # note: I believe these should not be hardcoded into /etc/systemd/system/kubelet.service
            # but this is the manner in which the AWS Linux 2 "service" file is structured
            sed -i s/MAX_PODS/8/g /etc/systemd/system/kubelet.service
            sed -i s/INTERNAL_IP/$INTERNAL_IP/g /etc/systemd/system/kubelet.service
            sed -i s/DNS_CLUSTER_IP/$DNS_CLUSTER_IP/g /etc/systemd/system/kubelet.service
            sed -i s/REGION/${AWS::Region}/g /etc/systemd/system/kubelet.service
            sed -i s,CLIENT_CA_FILE,/etc/kubernetes/pki/ca.crt,g /etc/systemd/system/kubelet.service
            # systemctl daemon-reload is required to pickup changes from kubelet.service
            # Run 'systemctl daemon-reload' to reload units.
            systemctl daemon-reload
            systemctl restart kubelet

Outputs:

  EKSWorkerIAMRoleARN:
    Description: EKS Worker IAM Role
    Value: !GetAtt EKSWorkerIAMRole.Arn
